/******************************************************************************
 *
 * Copyright (C) 2014 Alexander RÃ¶ssler
 *
 *
 * This module checks the functionality of thermistors
 *
 ******************************************************************************
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 * 02110-1301, USA.
 *
 * THE AUTHORS OF THIS PROGRAM ACCEPT ABSOLUTELY NO LIABILITY FOR
 * ANY HARM OR LOSS RESULTING FROM ITS USE.  IT IS _EXTREMELY_ UNWISE
 * TO RELY ON SOFTWARE ALONE FOR SAFETY.  Any machinery capable of
 * harming persons must have provisions for completely removing power
 * from all motors, etc, before persons enter any danger area.  All
 * machinery must be designed to comply with local and national safety
 * codes, and the authors of this software can not, and do not, take
 * any responsibility for such compliance.
 *
 * This code was written as part of the LinuxCNC project.  For more
 * information, go to www.linuxcnc.org.
 *
 ******************************************************************************/

component logic_fuse "HAL component for filtering error values";
pin in  bit     in = 0      "input value";
pin out bit     out         "output value";
pin in  float   wait = 0.5  "Time to wait before triggering an error in secods";
pin in  bit     reset = 0   "Resets the error";
pin in  bit     enable = 1  "When disabled the input values is passed to the output";
function _  fp "Update the output value";
description """
Component for filtering error values
.LP
TODO
""";
license "GPL";
variable bool last_reset = 0;
variable float oldwait = 0.0;
variable int t_secs = 0;
variable int t_nsecs = 0;
variable int c_secs = 0;
variable int c_nsecs = 0;
variable bool triggered = 0;
variable bool timeout = 0;
;;
FUNCTION(_) {
    if (wait != oldwait)
    {
        float time;
        
        time = wait;
        if (time < 0) time = 0; // no negative timeout periods
        // new timeout, convert to secs/ns
        oldwait = time;
        t_secs = time;
        time -= t_secs;
        t_nsecs = (1e9 * time);
    }

    if (enable)
    {
        if ((reset ^ last_reset) && reset) // reset
        {
            out = 0;
            triggered = 0;
            timeout = 0;
        }
        else if (!timeout) // no timeout
        {
            if (in) // error on source
            {
                if (!triggered) // triggering timer
                {
                    c_secs = t_secs;
                    c_nsecs = t_nsecs;
                    triggered = 1;
                }
                else
                {
                    c_nsecs -= period;
                    if (c_nsecs < 0)
                    {
                        c_nsecs += 1000000000;
                        if (c_secs > 0)
                        {
                            c_secs--;
                        }
                        else
                        {
                            timeout = 1; // timeout happened
                            out = 1;
                        }
                    }
                }
            }
            else
            {
                out = 0;
                triggered = 0; // reset the trigger
            }
        }
        else // timeout
        {
            out = 1; // out stays 1 until reset or enable is changed
        }
    }
    else
    {
        out = in;
    }

    last_reset = reset;
}
